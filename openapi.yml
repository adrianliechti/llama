openapi: "3.0.3"
info:
  title: Wingman API
  version: "0.1.0"
servers:
  - url: http://localhost:8080
  - url: "{protocol}://{host}"
    description: Responds with your request data
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      host:
        default: "localhost:8080"
security:
  - Bearer: []
paths:
  /v1/chat/completions:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCompletionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompletionResponse"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/CompletionStreamResponse"
  /v1/extract:
    post:
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: the file to extract text from
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                    description:
                      type: string
                      description: A description of what the response format is for, used by the model to determine how to respond in the format.
                    schema:
                      type: object
                      description: The schema for the response format, described as a JSON Schema object.
                  example: |
                    {
                        "name": "get_weather",
                        "description": "Fetches the weather in the given location",
                        "strict": true,
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "description": "The location to get the weather for"
                                },
                                "unit": {
                                    "type": ["string", "null"],
                                    "description": "The unit to return the temperature in",
                                    "enum": ["F", "C"]
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "location", "unit"
                            ]
                        }
                    }
              required:
                - file
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: object
        "400":
          description: Invalid or unsupported input
  /v1/segment:
    post:
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: the file to segment text from
      responses:
        "200":
          description: Segmented text
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    text:
                      type: string
                      description: text of segment
        "400":
          description: Invalid or unsupported input
  /v1/summarize:
    post:
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: the file to summarize text from
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Invalid or unsupported input
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
  schemas:
    ChatCompletionRequest:
      type: object
      properties:
        model:
          description: ID of the model to use.
          type: string
          example: gpt-4o
        messages:
          description: A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, images and audio.
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/ChatCompletionRequestMessage"        
    ChatCompletionRequestMessage:
      oneOf:
        - $ref: "#/components/schemas/CompletionSystemMessage"
        - $ref: "#/components/schemas/CompletionDeveloperMessage"
        - $ref: "#/components/schemas/CompletionUserMessage"
        - $ref: "#/components/schemas/CompletionAssistantMessage"
        - $ref: "#/components/schemas/CompletionToolMessage"
    CompletionMessageContentText:
      type: object
      title: Text content part
      properties:
        type:
          type: string
          enum:
            - text
          description: The type of the content part.
        text:
          type: string
          description: The text content.
      required:
        - type
        - Text
    CompletionMessageContentImage:
      type: object
      title: Image content part
      properties:
        type:
          type: string
          enum:
            - image_url
          description: The type of the content part.
        image_url:
          type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              type: string
              description: Specifies the detail level of the image.
              enum:
                - auto
                - low
                - high
              default: auto
          required:
            - url
      required:
        - type
        - image_url
    CompletionMessageContentAudio:
      type: object
      title: Audio content part      
      properties:
        type:
          type: string
          enum:
            - input_audio
          description: The type of the content part. Always `input_audio`.
        input_audio:
          type: object
          properties:
            data:
              type: string
              description: Base64 encoded audio data.
            format:
              type: string
              enum:
                - wav
                - mp3
              description: The format of the encoded audio data. Currently supports "wav" and "mp3".
          required:
            - data
            - format
      required:
        - type
        - input_audio
    CompletionMessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function      
    CompletionMessageToolCallChunk:
      type: object
      properties:
        index:
          type: integer
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before
                calling your function.
      required:
        - index
    CompletionMessage:
      type: object
      description: A chat completion message generated by the model.
      properties:
        role:
          type: string
          enum:
            - assistant
          description: The role of the author of this message.
        content:
          type: string
          description: The contents of the message.
          nullable: true        
        tool_calls:
          type: array
          description: The tool calls generated by the model, such as function calls.
          items:
            $ref: "#/components/schemas/CompletionMessageToolCall"
        audio:
          type: object
          nullable: true
          description: If the audio output modality is requested, this object contains data about the audio response from the model.          
          required:
            - id
            - expires_at
            - data
            - transcript
          properties:
            id:
              type: string
              description: Unique identifier for this audio response.
            expires_at:
              type: integer
              description: The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.
            data:
              type: string
              description: Base64 encoded audio bytes generated by the model, in the format specified in the request.
            transcript:
              type: string
              description: Transcript of the audio generated by the model.
      required:
        - role
        - content
    CompletionUsage:
      type: object
      description: Usage statistics for the completion request.
    CompletionSystemMessage:
      type: object
      title: System message
      description: Developer-provided instructions that the model should follow, regardless of messages sent by the user.
      properties:
        role:
          type: string
          enum:
            - system
          description: The role of the messages author, in this case `system`.
        content:
          description: The contents of the system message.
          oneOf:
            - type: string
              description: The contents of the system message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/CompletionMessageContentText"
              minItems: 1
    CompletionDeveloperMessage:
      type: object
      title: Developer message
      description: Developer-provided instructions that the model should follow, regardless of messages sent by the user.
      properties:
        role:
          type: string
          enum:
            - developer
          description: The role of the messages author, in this case `developer`.
        content:
          description: The contents of the developer message.
          oneOf:
            - type: string
              description: The contents of the developer message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/CompletionMessageContentText"
              minItems: 1        
    CompletionUserMessage:
      type: object
      title: User message
      description: Messages sent by an end user, containing prompts or additional context information.
      properties:
        content:
          description: The contents of the user message.
          oneOf:
            - type: string
              description: The text contents of the message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. Supported options differ based on the model being used to generate the response. Can contain text, image, or audio inputs.
              title: Array of content parts
              items:
                oneOf:
                  - $ref: "#/components/schemas/CompletionMessageContentText"
                  - $ref: "#/components/schemas/CompletionMessageContentImage"
                  - $ref: "#/components/schemas/CompletionMessageContentAudio"
              minItems: 1
          x-oaiExpandable: true
        role:
          type: string
          enum:
            - user
          description: The role of the messages author, in this case `user`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model
            information to differentiate between participants of the same role.
      required:
        - content
        - role
    CompletionAssistantMessage:
      type: object
      title: Assistant message
      description: Messages sent by the model in response to user messages.
      properties:
        role:
          type: string
          enum:
            - assistant
          description: The role of the messages author, in this case `assistant`.
        content:
          nullable: true
          oneOf:
            - type: string
              description: The contents of the assistant message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type.
              title: Array of content parts
              items:
                oneOf:
                  - $ref: "#/components/schemas/CompletionMessageContentText"
              minItems: 1
          description: The contents of the assistant message. Required unless `tool_calls` is specified.
        tool_calls:
          type: array
          description: The tool calls generated by the model, such as function calls.
          items:
            $ref: "#/components/schemas/CompletionMessageToolCall"
    CompletionToolMessage:
      type: object
      title: Tool message
      properties:
        role:
          type: string
          enum:
            - tool
          description: The role of the messages author, in this case `tool`.
        content:
          oneOf:
            - type: string
              description: The contents of the tool message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. For tool messages, only type `text` is supported.
              title: Array of content parts
              items:
                oneOf:
                  - $ref: "#/components/schemas/CompletionMessageContentText"
              minItems: 1
          description: The contents of the tool message.
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
      required:
        - role
        - content
        - tool_call_id
    CompletionResponse:
      type: object
      description: Represents a chat completion response returned by model, based on the provided input.
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
          items:
            type: object
            required:
              - finish_reason
              - index
              - message
              - logprobs
            properties:
              finish_reason:
                type: string
                description: >
                  The reason the model stopped generating tokens.                  
                  This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                  `length` if the maximum number of tokens specified in the request was reached,
                  `content_filter` if content was omitted due to a flag from our content filters,
                  `tool_calls` if the model called a tool.
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
              index:
                type: integer
                description: The index of the choice in the list of choices.
              message:
                $ref: "#/components/schemas/CompletionMessage"
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion was created.
        model:
          type: string
          description: The model used for the chat completion.
        object:
          type: string
          description: The object type, which is always `chat.completion`.
          enum:
            - chat.completion
        usage:
          $ref: "#/components/schemas/CompletionUsage"
      required:
        - choices
        - created
        - id
        - model
        - object
    CompletionStreamResponse:
      type: object
      description: Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion. Each chunk has the same ID.
        choices:
          type: array
          description: A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the last chunk if you set stream_options.
          items:
            type: object
            required:
              - delta
              - finish_reason
              - index
            properties:
              delta:
                type: object
                description: A chat completion delta generated by streamed model responses.
                properties:
                  content:
                    type: string
                    description: The contents of the chunk message.
                    nullable: true        
                  tool_calls:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompletionMessageToolCallChunk"
                  role:
                    type: string
                    enum:
                      - developer
                      - system
                      - user
                      - assistant
                      - tool
                    description: The role of the author of this message.
              finish_reason:
                type: string
                description: >
                  The reason the model stopped generating tokens.
                  This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                  `length` if the maximum number of tokens specified in the request was reached,
                  `content_filter` if content was omitted due to a flag from our content filters,
                  `tool_calls` if the model called a tool.
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                nullable: true
              index:
                type: integer
                description: The index of the choice in the list of choices.
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion was
            created. Each chunk has the same timestamp.
        model:
          type: string
          description: The model to generate the completion.
        service_tier:
          description: The service tier used for processing the request.
          type: string
          enum:
            - scale
            - default
          example: scale
          nullable: true        
        object:
          type: string
          description: The object type, which is always `chat.completion.chunk`.
          enum:
            - chat.completion.chunk
        usage:
          type: object
          nullable: true
          description: >
            An optional field that will only be present when you set
            `stream_options: {"include_usage": true}` in your request.

            When present, it contains a null value except for the last chunk
            which contains the token usage statistics for the entire request.
          properties:
            completion_tokens:
              type: integer
              description: Number of tokens in the generated completion.
            prompt_tokens:
              type: integer
              description: Number of tokens in the prompt.
            total_tokens:
              type: integer
              description: Total number of tokens used in the request (prompt + completion).
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
      required:
        - choices
        - created
        - id
        - model
        - object
