// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: tool.proto

package custom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tool_Info_FullMethodName    = "/tool.Tool/Info"
	Tool_Execute_FullMethodName = "/tool.Tool/Execute"
)

// ToolClient is the client API for Tool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Definition, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Result, error)
}

type toolClient struct {
	cc grpc.ClientConnInterface
}

func NewToolClient(cc grpc.ClientConnInterface) ToolClient {
	return &toolClient{cc}
}

func (c *toolClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Definition, error) {
	out := new(Definition)
	err := c.cc.Invoke(ctx, Tool_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, Tool_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServer is the server API for Tool service.
// All implementations must embed UnimplementedToolServer
// for forward compatibility
type ToolServer interface {
	Info(context.Context, *InfoRequest) (*Definition, error)
	Execute(context.Context, *ExecuteRequest) (*Result, error)
	mustEmbedUnimplementedToolServer()
}

// UnimplementedToolServer must be embedded to have forward compatible implementations.
type UnimplementedToolServer struct {
}

func (UnimplementedToolServer) Info(context.Context, *InfoRequest) (*Definition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedToolServer) Execute(context.Context, *ExecuteRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedToolServer) mustEmbedUnimplementedToolServer() {}

// UnsafeToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServer will
// result in compilation errors.
type UnsafeToolServer interface {
	mustEmbedUnimplementedToolServer()
}

func RegisterToolServer(s grpc.ServiceRegistrar, srv ToolServer) {
	s.RegisterService(&Tool_ServiceDesc, srv)
}

func _Tool_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tool_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tool_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tool_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tool_ServiceDesc is the grpc.ServiceDesc for Tool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tool.Tool",
	HandlerType: (*ToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Tool_Info_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Tool_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tool.proto",
}
