// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tool.proto

package custom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tool_Tools_FullMethodName   = "/tool.Tool/Tools"
	Tool_Execute_FullMethodName = "/tool.Tool/Execute"
)

// ToolClient is the client API for Tool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolClient interface {
	Tools(ctx context.Context, in *ToolsRequest, opts ...grpc.CallOption) (*ToolsResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type toolClient struct {
	cc grpc.ClientConnInterface
}

func NewToolClient(cc grpc.ClientConnInterface) ToolClient {
	return &toolClient{cc}
}

func (c *toolClient) Tools(ctx context.Context, in *ToolsRequest, opts ...grpc.CallOption) (*ToolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolsResponse)
	err := c.cc.Invoke(ctx, Tool_Tools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, Tool_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServer is the server API for Tool service.
// All implementations must embed UnimplementedToolServer
// for forward compatibility.
type ToolServer interface {
	Tools(context.Context, *ToolsRequest) (*ToolsResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ResultResponse, error)
	mustEmbedUnimplementedToolServer()
}

// UnimplementedToolServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToolServer struct{}

func (UnimplementedToolServer) Tools(context.Context, *ToolsRequest) (*ToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tools not implemented")
}
func (UnimplementedToolServer) Execute(context.Context, *ExecuteRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedToolServer) mustEmbedUnimplementedToolServer() {}
func (UnimplementedToolServer) testEmbeddedByValue()              {}

// UnsafeToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServer will
// result in compilation errors.
type UnsafeToolServer interface {
	mustEmbedUnimplementedToolServer()
}

func RegisterToolServer(s grpc.ServiceRegistrar, srv ToolServer) {
	// If the following call pancis, it indicates UnimplementedToolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tool_ServiceDesc, srv)
}

func _Tool_Tools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).Tools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tool_Tools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).Tools(ctx, req.(*ToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tool_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tool_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tool_ServiceDesc is the grpc.ServiceDesc for Tool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tool.Tool",
	HandlerType: (*ToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tools",
			Handler:    _Tool_Tools_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Tool_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tool.proto",
}
