// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: completer.proto

package custom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Completer_Complete_FullMethodName = "/completer.completer/Complete"
)

// CompleterClient is the client API for Completer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompleterClient interface {
	Complete(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (Completer_CompleteClient, error)
}

type completerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompleterClient(cc grpc.ClientConnInterface) CompleterClient {
	return &completerClient{cc}
}

func (c *completerClient) Complete(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (Completer_CompleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Completer_ServiceDesc.Streams[0], Completer_Complete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &completerCompleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Completer_CompleteClient interface {
	Recv() (*Completion, error)
	grpc.ClientStream
}

type completerCompleteClient struct {
	grpc.ClientStream
}

func (x *completerCompleteClient) Recv() (*Completion, error) {
	m := new(Completion)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompleterServer is the server API for Completer service.
// All implementations must embed UnimplementedCompleterServer
// for forward compatibility
type CompleterServer interface {
	Complete(*CompletionRequest, Completer_CompleteServer) error
	mustEmbedUnimplementedCompleterServer()
}

// UnimplementedCompleterServer must be embedded to have forward compatible implementations.
type UnimplementedCompleterServer struct {
}

func (UnimplementedCompleterServer) Complete(*CompletionRequest, Completer_CompleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedCompleterServer) mustEmbedUnimplementedCompleterServer() {}

// UnsafeCompleterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompleterServer will
// result in compilation errors.
type UnsafeCompleterServer interface {
	mustEmbedUnimplementedCompleterServer()
}

func RegisterCompleterServer(s grpc.ServiceRegistrar, srv CompleterServer) {
	s.RegisterService(&Completer_ServiceDesc, srv)
}

func _Completer_Complete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompleterServer).Complete(m, &completerCompleteServer{stream})
}

type Completer_CompleteServer interface {
	Send(*Completion) error
	grpc.ServerStream
}

type completerCompleteServer struct {
	grpc.ServerStream
}

func (x *completerCompleteServer) Send(m *Completion) error {
	return x.ServerStream.SendMsg(m)
}

// Completer_ServiceDesc is the grpc.ServiceDesc for Completer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Completer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "completer.completer",
	HandlerType: (*CompleterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Complete",
			Handler:       _Completer_Complete_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "completer.proto",
}
